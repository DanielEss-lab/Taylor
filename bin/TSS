#!/bin/env python3

import os, sys
import os.path
import time
#Imports the functions from TSSFuncts
from TSSFuncts import *

start = time.time()
inputs ={}
print("Parsing Inputs and Defaults\n\n")
#Sets Defaults for the Gaussian Program from the defaults file
defaultresults = default()
#Overrides any of the defaults that are specified in the input file
inputs = parseInput(sys.argv[1], defaultresults, sys.argv[2])
#makes directories(crest, modred, gaussianTS, completed)
makeDirectories()
#checks if the user wants to run crest conformer calculations, check with Taylor ???
run_crest = os.environ.get("RUN_CREST")
oF = open("mr_crest_var_test_file.txt", 'w')
oF.write("value of inputs at run_crest: " + inputs["run_crest"] + "\n")
#runs crest on original xyz to find conformers
if "yes" in run_crest: #check with Taylor???
    oF.write("crest is being used")
    oF.close()
    runCrest(sys.argv[2], inputs["leniency"], inputs)
    #makes modred files from crest conformers and puts them in the modred folder
    modredCrest("crest_conformers.xyz",inputs)
#does not run crest
else:
    oF.write("crest is not being used")
    oF.close()
    setChargeMultBonds(sys.argv[2], inputs["leniency"], inputs)
    modredNoCrest(sys.argv[2],inputs)
#inputs["opt"] = "(ts,noeigen,calcfc)"
inputs["opt"] = "(ts, noeigen, calcall)"
print("Initializing Gaussian Runs for all conformations\n\n")
#Runs gaussian inputs and tracks whether they are done or not. Once done they run gaussian TS search
gaussianProcesses(inputs)
#format time taken
end = time.time()
hours, rem = divmod(end-start, 3600)
minutes, seconds = divmod(rem, 60)
time_formated = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)
os.environ["TIME"] = time_formated
#check that no errors in modred or gaussian have occurred 
os.chdir("../")
iF = open("status", "r")
line = iF.readline()
if "Done" in line:
    os.environ["NO_ERRORS"] = "True"
    #moves the .log files from gaussianTS folder to the complete folder
    moveLogFiles()
    #check if user has specidified to do a vibration vector test on the completed TS's
    vib_test = os.getenv("VIBRATION_TEST")
    if vib_test != None:
        if "yes" in os.getenv("VIBRATION_TEST"):
            atom1_int = int(os.getenv("ATOM1"))
            atom2_int = int(os.getenv("ATOM2"))
            vibrationFrequencyMainFunc(atom1_int, atom2_int)
    #create final output file that will summarize time, whether or not crest was used etc
    finalOutput()
else:
    os.environ["NO_ERRORS"] = line
    finalOutput()
iF.close()

